package com.catering.dao.order_reports.menu_allocation;

import java.time.LocalDateTime;

import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.NamedNativeQuery;
import javax.persistence.SqlResultSetMapping;

import com.catering.dto.tenant.request.ChefLabourSupplierWiseRawMaterialReportDto;
import com.catering.dto.tenant.request.ChefLabourWiseRawMaterialReportDto;
import com.catering.dto.tenant.request.CommonDataForDropDownDto;
import com.catering.dto.tenant.request.FunctionPerOrderDto;
import com.catering.dto.tenant.request.MenuAllocationDetailRawMaterialReportDto;
import com.catering.dto.tenant.request.MenuAllocationMenuItemWiseRawMaterialReportDto;
import com.catering.dto.tenant.request.MenuAllocationMenuWithQuantityAndWithOutQuantityReportDto;
import com.catering.dto.tenant.request.MenuAllocationSupplierWiseRawMaterialReportDto;
import com.catering.dto.tenant.request.RawMaterialCategoryDirectOrderDto;
import com.catering.dto.tenant.request.RawMaterialChithhiReportDto;
import com.catering.dto.tenant.request.RawMaterialDetailsDto;
import com.catering.dto.tenant.request.RawMaterialOrderFileReportDto;
import com.catering.dto.tenant.request.TotalRawMaterialReportDto;
import com.catering.model.audit.AuditIdModelOnly;

/**
 * The `MenuAllocationReportQuery` class represents an entity for generating various reports related to menu allocation.
 * It includes named native queries for generating item-wise raw material reports and retrieving item categories and
 * functions per order.
 *
 * This entity inherits from `AuditIdModelOnly`, which provides auditing information for database records.
 *
 * This class plays a key role in generating reports and providing data for reporting purposes in the catering system.
 *
 * @author Krushali Talaviya 
 * @since 2023-09-11
 */
@NamedNativeQuery(
	name = "generateMenuItemWiseRawMaterialReport",
	resultSetMapping = "generateMenuItemWiseRawMaterialReportResult",
	query = "SELECT "
		+ "t.functionId, "
		+ "t.functionName, "
		+ "t.person, "
		+ "t.functionAddress, "
		+ "t.date, "
		+ "t.endDate, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.menuItemId, "
		+ "t.menuItem, "
		+ "t.finalQty, "
		+ "t.finalQuantityMeasurement, "
		+ "JSON_UNQUOTE(JSON_EXTRACT(t.total, '$[0]')) AS totalQty, "
		+ "CASE "
		+ " WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ " WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ " ELSE m.symbol_default_lang "
		+ " END AS totalQuantityMeasurement, "
		+ "t.isGeneralFixRawMaterial, "
		+ "t.extraQty, "
		+ "t.extraMeasurementSymbol, "
		+ "t.extraDecimalLimitQty, "
		+ "CASE "
		+ "WHEN (m_final.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (m_final.id = 1 OR m_final.id = 3) THEN 0 "
		+ "WHEN (m_final.decimal_limit_qty = -1) AND (m_final.id = 1 OR m_final.id = 3) THEN 3 "
		+ "ELSE m_final.decimal_limit_qty "
		+ "END AS decimalLimitQtyForFinal, "
		+ "CASE "
		+ "WHEN (m.decimal_limit_qty = -1) AND (JSON_UNQUOTE(JSON_EXTRACT(t.total, '$[0]')) % 1 = 0) AND (m.id = 1 OR m.id = 3) THEN 0 "
		+ "WHEN (m.decimal_limit_qty = -1) AND (m.id = 1 OR m.id = 3) THEN 3 "
		+ "ELSE m.decimal_limit_qty "
		+ "END AS decimalLimitQtyForTotal "
		+ "FROM "
		+ "((SELECT "
		+ " 0 AS isExtra, "
		+ "of2.id AS functionId, "
		+ "of2.sequence AS functionSequence, "
		+ "ft.id AS ftId, "
		+ "rmc.id AS rmcId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rm.priority AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "ompmi.menu_item_category_sequence AS menuItemCategorySequence, "
		+ "ompmi.menu_item_sequence AS menuItemSequence, "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END AS functionName, "
		+ "of2.person AS person, "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END AS functionAddress, "
		+ "of2.date AS date, "
		+ "of2.end_date AS endDate, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "mi.id AS menuItemId, "
		+ "CASE "
		+ "WHEN :langType = 0 AND ompmi.menu_item_name_default_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_default_lang) != '' THEN ompmi.menu_item_name_default_lang "
		+ "WHEN :langType = 1 AND ompmi.menu_item_name_prefer_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_prefer_lang) != '' THEN ompmi.menu_item_name_prefer_lang "
		+ "WHEN :langType = 2 AND ompmi.menu_item_name_supportive_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_supportive_lang) != '' THEN ompmi.menu_item_name_supportive_lang "
		+ "WHEN :langType = 1 AND mi.name_prefer_lang IS NOT NULL AND mi.name_prefer_lang != '' THEN mi.name_prefer_lang "
		+ "WHEN :langType = 2 AND mi.name_supportive_lang IS NOT NULL AND mi.name_supportive_lang != '' THEN mi.name_supportive_lang "
		+ "ELSE mi.name_default_lang "
		+ "END AS menuItem, "
		+ "rma.final_qty AS finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalQuantityMeasurement, "
		+ "finalM.id AS measurementIdForFinalQty, "
		+ "( "
		+ "SELECT JSON_ARRAY( "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(_rma.final_qty, _finalM.id)), getSmallestMeasurementId(_finalM.id), FALSE), "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(_rma.final_qty, _finalM.id)), getSmallestMeasurementId(_finalM.id), FALSE) "
		+ ") AS qtyAndMeasurementId "
		+ "FROM order_function _of2 "
		+ "INNER JOIN order_menu_preparation _omp ON _omp.fk_order_function_id = _of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item _ompmi ON _ompmi.fk_menu_preparation_id = _omp.id "
		+ "INNER JOIN raw_material_allocation _rma ON _rma.fk_menu_preparation_menu_item_id = _ompmi.id "
		+ "LEFT JOIN menu_item_raw_material _mirm ON _mirm.id = _rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material _rm ON _rm.id = CASE "
		+ "WHEN _mirm.id IS NOT NULL THEN _mirm.fk_raw_material_id "
		+ "ELSE _rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement _finalM ON _finalM.id = _rma.fk_final_measurement_id "
		+ "LEFT JOIN raw_material_category _rmc ON _rmc.id = _rm.fk_raw_material_category_id "
		+ "LEFT JOIN order_no_items _oni ON _oni.fk_order_menu_preparation_id = _omp.id AND _oni.fk_raw_material_id = _rm.id "
		+ "WHERE _of2.id = of2.id AND _rm.id = rm.id AND _oni.id IS NULL AND NOT (_ompmi.order_type = 2 AND _rmc.fk_raw_material_category_type_id = 1) "
		+ ") AS total, "
		+ "0 AS isGeneralFixRawMaterial, "
		+ "NULL AS extraQty, "
		+ "NULL AS extraDecimalLimitQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmaem.symbol_prefer_lang IS NOT NULL AND rmaem.symbol_prefer_lang != '' THEN rmaem.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND rmaem.symbol_supportive_lang IS NOT NULL AND rmaem.symbol_supportive_lang != '' THEN rmaem.symbol_supportive_lang "
		+ "ELSE rmaem.symbol_default_lang "
		+ "END AS extraMeasurementSymbol "
		+ "FROM order_function of2 "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "INNER JOIN customer_order_details cod ON cod.id = of2.fk_customer_order_details_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "INNER JOIN menu_item mi ON mi.id = ompmi.fk_menu_item_id "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = of2.fk_customer_order_details_id "
		+ "LEFT JOIN measurement rmaem ON rmaem.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE of2.fk_customer_order_details_id = :orderId "
		+ "AND IF(0 IN (:functionIds), TRUE, of2.id IN(:functionIds)) "
		+ "AND IF(0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "AND oni.id IS NULL "
		+ "AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "UNION ALL "
		+ "SELECT "
		+ "2 AS isExtra, "
		+ "NULL AS functionId, "
		+ "of2.sequence AS functionSequence, "
		+ "ft.id AS ftId, "
		+ "rmc.id AS rmcId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rm.priority AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "ompmi.menu_item_category_sequence AS menuItemCategorySequence, "
		+ "ompmi.menu_item_sequence AS menuItemSequence, "
		+ "'Extra' AS functionName, "
		+ "NULL AS person, "
		+ "NULL AS functionAddress, "
		+ "NULL AS date, "
		+ "NULL AS endDate, "
		+ "NULL AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "NULL AS menuItemId, "
		+ "NULL AS menuItem, "
		+ "NULL AS finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmaem.symbol_prefer_lang IS NOT NULL AND rmaem.symbol_prefer_lang != '' THEN rmaem.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND rmaem.symbol_supportive_lang IS NOT NULL AND rmaem.symbol_supportive_lang != '' THEN rmaem.symbol_supportive_lang "
		+ "ELSE rmaem.symbol_default_lang "
		+ "END  AS finalQuantityMeasurement, "
		+ "NULL AS measurementIdForFinalQty, "
		+ "NULL  AS total, "
		+ "0 AS isGeneralFixRawMaterial, "
		+ "IF(:isAdjustQuantity, rmae.quantity, NULL) AS extraQty, "
		+ "rmaem.decimal_limit_qty AS extraDecimalLimitQty, "
		+ "IF(:isAdjustQuantity,CASE "
		+ "WHEN :langType = 1 AND rmaem.symbol_prefer_lang IS NOT NULL AND rmaem.symbol_prefer_lang != '' THEN rmaem.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND rmaem.symbol_supportive_lang IS NOT NULL AND rmaem.symbol_supportive_lang != '' THEN rmaem.symbol_supportive_lang "
		+ "ELSE rmaem.symbol_default_lang "
		+ "END , NULL) "
		+ "AS extraMeasurementSymbol "
		+ "FROM order_function of2 "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "INNER JOIN customer_order_details cod ON cod.id = of2.fk_customer_order_details_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "INNER JOIN menu_item mi ON mi.id = ompmi.fk_menu_item_id "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = of2.fk_customer_order_details_id "
		+ "LEFT JOIN measurement rmaem ON rmaem.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE of2.fk_customer_order_details_id = :orderId "
		+ "AND IF(0 IN (:functionIds), TRUE, of2.id IN(:functionIds)) "
		+ "AND IF(0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "AND oni.id IS NULL "
		+ "AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "AND rmae.quantity IS NOT NULL AND :isAdjustQuantity = TRUE AND 0 IN (:functionIds) "
		+ ") "
		+ "UNION ALL "
		+ "( "
		+ "SELECT "
		+ " 1 AS isExtra, "
		+ "of2.id AS functionId, "
		+ "of2.sequence AS functionSequence, "
		+ "ft.id AS ftId, "
		+ "rmc.id AS rmcId, "
		+ "rmc.priority AS rmcPriority, "
		+ "'rowLast' AS rmpriority, "
		+ "NULL AS rmId, "
		+ "NULL AS menuItemCategorySequence, "
		+ "NULL AS menuItemSequence, "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END AS functionName, "
		+ "of2.person AS person, "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END AS functionAddress, "
		+ "of2.date AS date, "
		+ "of2.end_date AS endDate, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ ":generalFixRawMaterial AS rawMaterial, "
		+ "rm.id AS menuItemId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS menuItem, "
		+ "ofgrm.qty AS finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ "ELSE m.symbol_default_lang "
		+ "END AS finalQuantityMeasurement, "
		+ "m.id AS measurementIdForFinalQty, "
		+ "(SELECT JSON_ARRAY('', '') AS qtyAndMeasurementId) AS total, "
		+ "1 AS isGeneralFixRawMaterial, "
		+ "NULL AS extraQty, "
		+ "NULL AS extraDecimalLimitQty, "
		+ "NULL AS extraMeasurementSymbol "
		+ "FROM customer_order_details cod "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_general_fix_raw_material ofgrm ON ofgrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN raw_material rm ON rm.id = ofgrm.fk_raw_material_id "
		+ "LEFT JOIN godown g ON g.id = ofgrm.fk_godown_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ofgrm.fk_measurement_id "
		+ "WHERE cod.id = :orderId AND ofgrm.qty > 0 AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ ")) AS t "
		+ "LEFT JOIN measurement m ON m.id = JSON_UNQUOTE(JSON_EXTRACT(t.total, '$[1]')) "
		+ "LEFT JOIN measurement m_final ON m_final.id = t.measurementIdForFinalQty "
		+ "ORDER BY t.isExtra, "
		+ "CASE "
		+ "WHEN isExtra = 2 THEN t.rmId "
		+ "END, "
		+ "t.functionSequence, t.ftId, t.rmcPriority, t.rmcId, t.rmPriority, t.rmId, t.isGeneralFixRawMaterial, t.menuItemCategorySequence, t.menuItemSequence "
)

@SqlResultSetMapping(
	name = "generateMenuItemWiseRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = MenuAllocationMenuItemWiseRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "person", type = Long.class),
			@ColumnResult(name = "functionAddress", type = String.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "endDate", type = LocalDateTime.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "menuItemId", type = Long.class),
			@ColumnResult(name = "menuItem", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalQuantityMeasurement", type = String.class),
			@ColumnResult(name = "totalQty", type = Double.class),
			@ColumnResult(name = "totalQuantityMeasurement", type = String.class),
			@ColumnResult(name = "isGeneralFixRawMaterial", type = Integer.class),
			@ColumnResult(name = "decimalLimitQtyForFinal", type = Integer.class),
			@ColumnResult(name = "decimalLimitQtyForTotal", type = Integer.class),
			@ColumnResult(name = "extraQty", type = Double.class),
			@ColumnResult(name = "extraDecimalLimitQty", type = Integer.class),
			@ColumnResult(name = "extraMeasurementSymbol", type = String.class)
		}
	)
)

@NamedNativeQuery(
	name = "getItemCategoryPerOrder",
	resultSetMapping = "getItemCategoryPerOrderResult",
	query = "SELECT "
		+ "rmc.id, "
		+ "rmc.name_default_lang AS nameDefaultLang, "
		+ "rmc.name_prefer_lang AS namePreferLang, "
		+ "rmc.name_supportive_lang AS nameSupportiveLang "
		+ "FROM((SELECT "
		+ "mirm.fk_raw_material_id AS rawMaterialId "
		+ "FROM menu_item_raw_material mirm "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_item_raw_material_id = mirm.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.id = rma.fk_menu_preparation_menu_item_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.id = ompmi.fk_menu_preparation_id "
		+ "INNER JOIN order_function ofu ON ofu.id = omp.fk_order_function_id "
		+ "WHERE ofu.fk_customer_order_details_id = :orderId) "
		+ "UNION "
		+ "(SELECT "
		+ "ogfrm.fk_raw_material_id AS rawMaterialId "
		+ "FROM order_function ofu "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = ofu.id "
		+ "WHERE ofu.fk_customer_order_details_id = :orderId)) AS t "
		+ "INNER JOIN raw_material rm ON rm.id = t.rawMaterialId "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "GROUP BY rmc.id "
		+ "ORDER BY rmc.id;"
)

@SqlResultSetMapping(
	name = "getItemCategoryPerOrderResult",
	classes = @ConstructorResult(
		targetClass = CommonDataForDropDownDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class)
		}
	)
)

@NamedNativeQuery(
	name = "getFunctionPerOrder",
	resultSetMapping = "getFunctionPerOrderResult",
	query = "SELECT DISTINCT "
		+ "ft.id, "
		+ "of2.id AS orderFunctionId, "
		+ "of2.date AS orderDate, "
		+ "ft.name_default_lang AS nameDefaultLang, "
		+ "ft.name_prefer_lang AS namePreferLang, "
		+ "ft.name_supportive_lang AS nameSupportiveLang "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "WHERE o.id = :orderId"
)

@SqlResultSetMapping(
	name = "getFunctionPerOrderResult",
	classes = @ConstructorResult(
		targetClass = FunctionPerOrderDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class),
			@ColumnResult(name = "orderFunctionId", type = Long.class),
			@ColumnResult(name = "orderDate", type = LocalDateTime.class),
		}
	)
)

@NamedNativeQuery(
	name = "generateDetailedRawMaterialReport",
	resultSetMapping = "generateDetailedRawMaterialReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.functionId, "
		+ "t.isExtra, "
		+ "t.venue, "
		+ "t.isDateTime, "
		+ "t.date, "
		+ "t.functionName, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "IF(t.isGeneralFixRawMaterial, '', t.sumOfRawMaterial) AS sumOfRawMaterial, "
		+ "t.finalQty, "
		+ "CASE  "
		+ " WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ " WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ " ELSE finalM.symbol_default_lang  "
		+ "END AS finalMeasurementName, "
 		+ "finalM.id AS finalMeasurementId, "
 		+ "t.menuItemAndRawMaterialId, "
		+ "CASE "
		+ " WHEN (finalM.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ " WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ " ELSE finalM.decimal_limit_qty "
		+ " END AS decimalLimitQty, "
		+ "t.timeInWord ,"
		+ "IF(0 IN (:functionIds), TRUE , FALSE) AS isAllFuntions "
		+ "FROM ( "
		+ "SELECT "
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.rmcPriority, "
		+ "t.rmcId, "
		+ "NULLIF(SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IFNULL(t.rmPriority, '000') ORDER BY t.rmPriority SEPARATOR ' '), ' ', 1), '000') AS rmPriority, "
		+ "t.rmid, "
		+ ":isDateTime AS isDateTime, "
 		+ ":orderDate AS date, "
 		+ "IF( 0 IN (:functionIds) OR :count > 1, '', "
 		+ "CASE "
 		+ " WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
 		+ " WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
 		+ " ELSE ft.name_default_lang "
 		+ "END) AS functionName, "
 		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
 		+ "CASE "
 		+ " WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
 		+ " WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
 		+ " ELSE rmc.name_default_lang "
 		+ "END AS rawMaterialCategory, "
 		+ "CASE "
 		+ " WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
 		+ " WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
 		+ " ELSE rm.name_default_lang "
 		+ "END AS rawMaterial, "
 		+ "GROUP_CONCAT(t.sumOfRawMaterial SEPARATOR ' + ') AS sumOfRawMaterial, "
		+ "CASE "
		+ "WHEN TIME(CONVERT_TZ(:orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '04:00:00' AND '10:45:59' THEN :morning "
		+ "WHEN TIME(CONVERT_TZ(:orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '10:46:00' AND '16:00:00' THEN :noon "
		+ "WHEN TIME(CONVERT_TZ(:orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '16:01:00' AND '20:00:00' THEN :evening "
		+ "WHEN TIME(CONVERT_TZ(:orderDate, :timeZone, (SELECT time_zone FROM company_setting))) >= '20:01:00' OR TIME(CONVERT_TZ(:orderDate, :timeZone, (SELECT time_zone FROM company_setting))) <= '03:59:59' THEN :night "
		+ " ELSE '' "
		+ " END AS timeInWord, "
		+ "t.isGeneralFixRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit "
		+ "FROM "
		+ "(SELECT "
		+ "FALSE as isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ " WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,  "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId,  "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "g.id AS gId, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "rma.order_time AS dateInDateTimeFormat, "
		+ "CONCAT( "
		+ "IFNULL(GROUP_CONCAT(CASE WHEN rma.final_qty != 0 THEN rma.final_qty END SEPARATOR ' + '), ''), "
		+ "IFNULL(CONCAT(' + ', GROUP_CONCAT(CASE WHEN oc.qty > 0 AND IFNULL(oc.fk_godown_id, 0) = IFNULL(rma.fk_godown_id, 0) THEN oc.qty END SEPARATOR ' + ')), '') "
		+ ") AS sumOfRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "LEFT JOIN order_crockery oc ON oc.fk_order_function_id = of2.id AND oc.fk_raw_material_id = rm.id "
		+ "LEFT JOIN measurement finalC ON finalC.id = oc.fk_measurement_id "
		+ "LEFT JOIN measurement rmae_mesurement ON rmae_mesurement.id = rmae.fk_measurement_id "
		+ "WHERE o.id = :orderId AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "TRUE as isExtra,  "
		+ "of2.id AS functionId,  "
		+ "CASE "
		+ " WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ " WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ " WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ " ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "g.id AS gId, "
 		+ "NULL AS menuItemAndRawMaterialId, "
		+ "of2.date AS dateInDateTimeFormat, "
		+ "rmae.quantity AS sumOfRawMaterial, "
		+ "rmae.quantity AS finalQty, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE o.id = :orderId AND :isAdjustQuantity AND rmae.quantity > 0 AND 0 IN (:functionIds) "
		+ "AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) "
		+ "AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "AND oni.id IS NULL "
		+ "AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "FALSE AS isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ "WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ "ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "'lastRow' AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "g.id AS gId, "
 		+ "GROUP_CONCAT(CONCAT(1, '-', of2.id, '-', rm.id) ORDER BY of2.id, rm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "ogfrm.order_time AS dateInDateTimeFormat, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS sumOfRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit, "
		+ "1 AS isGeneralFixRawMaterial "
		+ "FROM customer_order_details cod "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ogfrm.fk_measurement_id "
		+ "WHERE cod.id = :orderId AND ogfrm.qty > 0 AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY rm.id, venue) AS t "
		+ "LEFT JOIN order_function of2 ON of2.id = t.functionId "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rmcId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rmId "
		+ "LEFT JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "GROUP BY t.rmId, t.venue) AS t "
		+ "INNER JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "ORDER BY t.venue, t.rmcPriority, t.rmcId, t.rmPriority, t.rmId, t.isGeneralFixRawMaterial " 
)

@SqlResultSetMapping(
	name = "generateDetailedRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = MenuAllocationDetailRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "orderId", type = Long.class),
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "isExtra", type = Boolean.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "isDateTime", type = Boolean.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "sumOfRawMaterial", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementName", type = String.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "menuItemAndRawMaterialId", type = String.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "timeInWord", type = String.class),
			@ColumnResult(name = "isAllFuntions", type = Boolean.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateTotalRawMaterialReport",
	resultSetMapping = "generateTotalRawMaterialReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.isExtra, "
		+ "t.isDateTime, "
		+ "t.date, "
		+ "t.functionName, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalMeasurementName, "
		+ "finalM.id AS finalMeasurementId, "
		+ "t.menuItemAndRawMaterialId, "
		+ "CASE "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ "ELSE finalM.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "IF(0 IN (:functionIds), TRUE , FALSE) AS isAllFuntions "
		+ "FROM ( "
		+ "SELECT "
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.rmcPriority, "
		+ "t.rmcId, "
		+ "NULLIF(SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IFNULL(t.rmPriority, '000') ORDER BY t.rmPriority SEPARATOR ' '), ' ', 1), '000') AS rmPriority, "
		+ "t.rmid, "
		+ ":isDateTime AS isDateTime, "
		+ ":orderDate AS date, "
		+ "IF( 0 IN (:functionIds) OR :count > 1, '', "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END) AS functionName, "
 		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "t.isGeneralFixRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit "
		+ "FROM (SELECT "
		+ "FALSE as isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))),  getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN order_crockery oc ON oc.fk_order_function_id = of2.id AND oc.fk_raw_material_id = rm.id "
		+ "LEFT JOIN measurement finalC ON finalC.id = oc.fk_measurement_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN measurement rmae_mesurement ON rmae_mesurement.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE o.id = :orderId AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds))  AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "TRUE as isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,"
		+ "rmc.priority AS rmcPriority,"
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
 		+ "NULL AS menuItemAndRawMaterialId, "
		+ "rmae.quantity AS finalQty, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE o.id = :orderId AND :isAdjustQuantity AND rmae.quantity > 0 AND 0 IN (:functionIds) "
		+ "AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) "
		+ "AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN (:rawMaterialCategoryIds)) "
		+ "AND oni.id IS NULL "
		+ "AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "FALSE AS isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND od.venue_prefer_lang IS NOT NULL AND od.venue_prefer_lang != '' THEN od.venue_prefer_lang "
		+ "WHEN :langType = 2 AND od.venue_supportive_lang IS NOT NULL AND od.venue_supportive_lang != '' THEN od.venue_supportive_lang "
		+ "ELSE od.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority,"
		+ "rmc.id AS rmcId, "
		+ "'lastRow' AS rmpriority, "
		+ "rm.id AS rmId, "
 		+ "GROUP_CONCAT(CONCAT(1, '-', of2.id, '-', rm.id) ORDER BY of2.id, rm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit,"
		+ "1 AS isGeneralFixRawMaterial "
		+ "FROM customer_order_details od "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = od.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ogfrm.fk_measurement_id "
		+ "WHERE od.id = :orderId AND ogfrm.qty > 0 AND (0 IN (:functionIds) OR of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY rm.id, venue) AS t "
		+ "LEFT JOIN order_function of2 ON of2.id = t.functionId "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rmcId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rmId "
		+ "LEFT JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "WHERE t.finalQty > 0 "
		+ "GROUP BY t.rmId, t.venue) AS t "
		+ "INNER JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "ORDER BY t.venue, t.rmcPriority, t.rmcId, t.rmPriority, t.rmId, t.isGeneralFixRawMaterial"
)

@NamedNativeQuery(
	name = "generateEliteCaterersTotalRawMaterialReport",
	resultSetMapping = "generateTotalRawMaterialReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.isExtra, "
		+ ":isDateTime AS isDateTime, "
		+ ":orderDate AS date, "
		+ "t.functionName, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalMeasurementName, "
		+ "finalM.id AS finalMeasurementId, "
		+ "t.menuItemAndRawMaterialId, "
		+ "CASE "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ "ELSE finalM.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "IF(0 IN (:functionIds), TRUE , FALSE) AS isAllFuntions "
		+ "FROM ( "
		+ "SELECT "
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "t.functionId, "
		+ "t.functionSequence,"
		+ "t.menu_item_category_sequence, "
		+ "t.menu_item_sequence, "
		+ "t.venue, "
		+ "t.rmcPriority, "
		+ "t.rmcId, "
		+ "NULLIF(SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IFNULL(t.rmPriority, '000') ORDER BY t.rmPriority SEPARATOR ' '), ' ', 1), '000') AS rmPriority, "
		+ "t.rmid, "
		+ ":orderDate AS date, "
		+ "IF( 0 IN (:functionIds) OR :count > 1, '', "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END) AS functionName, "
		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "t.isGeneralFixRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit "
		+ "FROM (SELECT "
		+ "FALSE as isExtra, "
		+ "of2.id AS functionId, "
		+ "of2.sequence AS functionSequence,"
		+ "ompmi.menu_item_category_sequence AS menu_item_category_sequence, "
		+ "ompmi.menu_item_sequence AS menu_item_sequence, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN order_crockery oc ON oc.fk_order_function_id = of2.id AND oc.fk_raw_material_id = rm.id "
		+ "LEFT JOIN measurement finalC ON finalC.id = oc.fk_measurement_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN measurement rmae_mesurement ON rmae_mesurement.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE o.id = :orderId AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds))  AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "TRUE as isExtra, "
		+ "of2.id AS functionId, "
		+ "of2.sequence AS functionSequence,"
		+ "ompmi.menu_item_category_sequence AS menu_item_category_sequence, "
		+ "ompmi.menu_item_sequence AS menu_item_sequence, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,"
		+ "rmc.priority AS rmcPriority,"
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "NULL AS menuItemAndRawMaterialId, "
		+ "rmae.quantity AS finalQty, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE o.id = :orderId AND :isAdjustQuantity AND rmae.quantity > 0 AND 0 IN (:functionIds) "
		+ "AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) "
		+ "AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN (:rawMaterialCategoryIds)) "
		+ "AND oni.id IS NULL "
		+ "AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "FALSE AS isExtra, "
		+ "of2.id AS functionId, "
		+ "of2.sequence AS functionSequence, "
		+ "NULL AS menu_item_category_sequence, "
		+ "NULL AS menu_item_sequence, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND od.venue_prefer_lang IS NOT NULL AND od.venue_prefer_lang != '' THEN od.venue_prefer_lang "
		+ "WHEN :langType = 2 AND od.venue_supportive_lang IS NOT NULL AND od.venue_supportive_lang != '' THEN od.venue_supportive_lang "
		+ "ELSE od.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmc.priority AS rmcPriority,"
		+ "rmc.id AS rmcId, "
		+ "'lastRow' AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "GROUP_CONCAT(CONCAT(1, '-', of2.id, '-', rm.id) ORDER BY of2.id, rm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit,"
		+ "1 AS isGeneralFixRawMaterial "
		+ "FROM customer_order_details od "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = od.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ogfrm.fk_measurement_id "
		+ "WHERE od.id = :orderId AND ogfrm.qty > 0 AND (0 IN (:functionIds) OR of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY rm.id, venue) AS t "
		+ "LEFT JOIN order_function of2 ON of2.id = t.functionId "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rmcId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rmId "
		+ "LEFT JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "WHERE t.finalQty > 0 "
		+ "GROUP BY t.rmId, t.venue) AS t "
		+ "INNER JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "ORDER BY t.venue, t.rmcPriority, t.rmcId, t.functionSequence, t.menu_item_category_sequence, t.menu_item_sequence, t.rmpriority, t.rmId, t.isGeneralFixRawMaterial"
)

@SqlResultSetMapping(
	name = "generateTotalRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = TotalRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "orderId", type = Long.class),
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "isExtra", type = Boolean.class),
			@ColumnResult(name = "isDateTime", type = Boolean.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementName", type = String.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "menuItemAndRawMaterialId", type = String.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "isAllFuntions", type = Boolean.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateChefLabourWiseRawMaterialReport",
	resultSetMapping = "generateChefLabourWiseRawMaterialReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.orderType, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.isExtra, "
		+ "t.contactId, "
		+ "t.contactName, "
		+ "t.isDateTime, "
		+ "t.date, "
		+ "t.functionName, "
		+ "t.person, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.menuPreparationMenuItemId, "
		+ "IF(t.orderType= 1, t.menuItem, NULL) AS menuItem, "
		+ "NULL AS menuItemGroup, "
		+ "t.finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalMeasurementName, "
		+ "finalM.id AS finalMeasurementId, "
		+ "t.menuItemAndRawMaterialId, "
		+ "CASE "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ "ELSE finalM.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "IF(0 IN (:functionIds), TRUE, FALSE) AS isAllFuntions "
		+ "FROM ( "
		+ "SELECT "
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "t.orderType, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.rmcPriority, "
		+ "t.rmcId, "
		+ "NULLIF(SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IFNULL(t.rmPriority, '000') ORDER BY t.rmPriority SEPARATOR ' '), ' ', 1), '000') AS rmPriority, "
		+ "t.rmid, "
		+ "IF(t.orderType = 1, t.contactId, NULL) AS contactId, "
		+ "CASE "
		+ "WHEN t.orderType = 2 THEN NULL "
		+ "WHEN t.contactId IS NULL THEN NULL "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND c.name_prefer_lang IS NOT NULL AND c.name_prefer_lang != '' THEN c.name_prefer_lang "
		+ "WHEN :langType = 2 AND c.name_supportive_lang IS NOT NULL AND c.name_supportive_lang != '' THEN c.name_supportive_lang "
		+ "ELSE c.name_default_lang "
		+ "END "
		+ "END AS contactName, "
		+ ":isDateTime AS isDateTime, "
		+ ":orderDate AS date, "
		+ "IF( 0 IN (:functionIds) OR :count > 1, '', "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END) AS functionName, "
		+ "of2.person AS person, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
 		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "t.menuPreparationMenuItemId, "
		+ "t.menuItemId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND mi.name_prefer_lang IS NOT NULL AND mi.name_prefer_lang != '' THEN mi.name_prefer_lang "
		+ "WHEN :langType = 2 AND mi.name_supportive_lang IS NOT NULL AND mi.name_supportive_lang != '' THEN mi.name_supportive_lang "
		+ "ELSE mi.name_default_lang "
		+ "END AS menuItem, "
		+ "t.isGeneralFixRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit "
		+ "FROM (SELECT "
		+ "FALSE as isExtra, "
		+ "CASE WHEN ompmi.order_type = 1 THEN 1 ELSE 2 END AS orderSequence, "
		+ "ompmi.order_type as orderType, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "c.id AS contactId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "ompmi.fk_menu_item_id AS menuItemId, "
		+ "ompmi.id AS menuPreparationMenuItemId, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "LEFT JOIN order_menu_allocation_type omat ON omat.fk_order_menu_preparation_menu_item_id = ompmi.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN order_crockery oc ON oc.fk_order_function_id = of2.id AND oc.fk_raw_material_id = rm.id "
		+ "LEFT JOIN measurement finalC ON finalC.id = oc.fk_measurement_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN measurement rmae_mesurement ON rmae_mesurement.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "LEFT JOIN contact c ON omat.fk_contact_id = c.id "
		+ "WHERE o.id = :orderId AND IF( 0 IN (:orderTypeIds), IF( ompmi.order_type = 1 AND c.id IS NOT NULL, TRUE, ompmi.order_type != 1), IF(:orderTypeIds = 1, ompmi.order_type = 1 AND IF(0 IN (:contactIds) AND c.id , TRUE, c.id IN (:contactIds)), ompmi.order_type != 1)) AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) AND (ompmi.fk_menu_item_id IN (:menuItemIds) OR 0 IN (:menuItemIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY orderSequence, c.id, rm.id, menuItemId, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "TRUE as isExtra, "
		+ "NULL AS orderSequence, "
		+ "NULL AS orderType, "
		+ "NULL AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,"
		+ "Null AS contactId,"
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "NULL AS menuItemId,"
		+ "NULL AS menuPreparationMenuItemId, "
		+ "NULL AS menuItemAndRawMaterialId, "
		+ "rmae.quantity AS finalQty, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE :isAdjustQuantity AND rmae.quantity > 0 AND 0 IN (:functionIds) AND 0 IN (:menuItemIds) AND 1 NOT IN (:orderTypeIds) AND o.id = :orderId AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) AND (ompmi.fk_menu_item_id IN (:menuItemIds) OR 0 IN (:menuItemIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "FALSE AS isExtra, "
		+ "NULL AS orderSequence, "
		+ "NULL AS orderType, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND od.venue_prefer_lang IS NOT NULL AND od.venue_prefer_lang != '' THEN od.venue_prefer_lang "
		+ "WHEN :langType = 2 AND od.venue_supportive_lang IS NOT NULL AND od.venue_supportive_lang != '' THEN od.venue_supportive_lang "
		+ "ELSE od.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "NULL AS contactId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "'lastRow' AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "NULL AS menuItemId, "
		+ "NULL AS menuPreparationMenuItemId, "
		+ "GROUP_CONCAT(CONCAT(1, '-', of2.id, '-', rm.id) ORDER BY of2.id, rm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit, "
		+ "1 AS isGeneralFixRawMaterial "
		+ "FROM customer_order_details od "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = od.id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ogfrm.fk_measurement_id "
		+ "WHERE 1 NOT IN (:orderTypeIds) AND od.id = :orderId AND ogfrm.qty > 0 AND (0 IN (:functionIds) OR of2.id IN(:functionIds)) AND IF(0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY rm.id, venue) AS t "
		+ "LEFT JOIN menu_item mi ON mi.id = t.menuItemId "
		+ "LEFT JOIN contact c ON c.id = t.contactId "
		+ "LEFT JOIN order_function of2 ON of2.id = t.functionId "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rmcId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rmId "
		+ "LEFT JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "WHERE t.finalQty > 0 "
		+ "GROUP BY t.rmId, t.venue, t.contactId) AS t "
		+ "INNER JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "ORDER BY t.venue, CASE WHEN 0 IN (:orderTypeIds) AND t.orderType = 1 THEN 1 ELSE 2 END, t.contactId, t.rmcPriority, t.rmcId, t.rmPriority, t.rmId, t.isGeneralFixRawMaterial "
)

@SqlResultSetMapping(
	name = "generateChefLabourWiseRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = ChefLabourWiseRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "orderId", type = Long.class),
			@ColumnResult(name = "orderType", type = Long.class),
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "isExtra", type = Boolean.class),
			@ColumnResult(name = "contactId", type = Long.class),
			@ColumnResult(name = "contactName", type = String.class),
			@ColumnResult(name = "isDateTime", type = Boolean.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "person", type = Long.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "menuPreparationMenuItemId", type = Long.class),
			@ColumnResult(name = "menuItemAndRawMaterialId", type = String.class),
			@ColumnResult(name = "menuItem", type = String.class),
			@ColumnResult(name = "menuItemGroup", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementName", type = String.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "isAllFuntions", type = Boolean.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateChefLabourSupplierWiseRawMaterialReport",
	resultSetMapping = "generateChefLabourSupplierWiseRawMaterialReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.isExtra, "
		+ "t.contactId, "
		+ "t.contactName, "
		+ "t.supplierId, "
		+ "t.supplierName, "
		+ "t.isDateTime, "
		+ "t.date, "
		+ "t.functionName, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.menuItemAndRawMaterialId, "
		+ "t.finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalMeasurementName, "
 		+ "finalM.id AS finalMeasurementId, "
		+ "CASE "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (t.finalQty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ "ELSE finalM.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "IF(0 IN (:functionIds), TRUE, FALSE) AS isAllFuntions "
		+ "FROM ( "
		+ "SELECT "
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "t.orderType, "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.rmcPriority, "
		+ "t.rmcId, "
		+ "NULLIF(SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT IFNULL(t.rmPriority, '000') ORDER BY t.rmPriority SEPARATOR ' '), ' ', 1), '000') AS rmPriority, "
		+ "t.rmid, "
		+ "IF(t.orderType = 1, t.contactId, NULL) AS contactId, "
		+ "IF(t.orderType = 1, "
		+ "CASE "
		+ "WHEN :langType = 1 AND c.name_prefer_lang IS NOT NULL AND c.name_prefer_lang != '' THEN c.name_prefer_lang "
		+ "WHEN :langType = 2 AND c.name_supportive_lang IS NOT NULL AND c.name_supportive_lang != '' THEN c.name_supportive_lang "
		+ "ELSE c.name_default_lang "
		+ "END, NULL)  AS contactName, "
		+ "t.supplierId AS supplierId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS supplierName, "
		+ ":isDateTime AS isDateTime, "
		+ ":orderDate AS date, "
		+ "IF( 0 IN (:functionIds) OR :count > 1, '', "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END) AS functionName, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
 		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "t.isGeneralFixRawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit "
		+ "FROM (SELECT "
		+ "rma.fk_contact_agency_id AS supplierId, "
		+ "FALSE as isExtra, "
		+ "CASE WHEN ompmi.order_type = 1 THEN 1 ELSE 2 END AS orderSequence, "
		+ "ompmi.order_type as orderType, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "c.id AS contactId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id) + IF(IFNULL(oc.fk_godown_id, 0) != IFNULL(rma.fk_godown_id, 0), 0, IFNULL(getSmallestMeasurementValue(oc.qty, finalM.id), 0))), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "LEFT JOIN order_menu_allocation_type omat ON omat.fk_order_menu_preparation_menu_item_id = ompmi.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN order_crockery oc ON oc.fk_order_function_id = of2.id AND oc.fk_raw_material_id = rm.id "
		+ "LEFT JOIN measurement finalC ON finalC.id = oc.fk_measurement_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN measurement rmae_mesurement ON rmae_mesurement.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "LEFT JOIN contact c ON omat.fk_contact_id = c.id "
		+ "WHERE o.id = :orderId AND IF( 0 IN (:orderTypeIds), IF( ompmi.order_type = 1 AND c.id IS NOT NULL, TRUE, ompmi.order_type != 1), IF(:orderTypeIds = 1, ompmi.order_type = 1 AND IF(0 IN (:contactIds) AND c.id , TRUE, c.id IN (:contactIds)), ompmi.order_type != 1)) AND IF( 0 IN (:functionIds) , TRUE, of2.id IN(:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) AND (ompmi.fk_menu_item_id IN (:menuItemIds) OR 0 IN (:menuItemIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY orderSequence, c.id, supplierId, rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "rmae.fk_contact_agency_id AS supplierId, "
		+ "TRUE as isExtra, "
		+ "NULL AS orderSequence, "
		+ "NULL AS orderType, "
		+ "NULL AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "Null AS contactId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "rm.priority AS rmPriority, "
		+ "rm.id AS rmid, "
		+ "NULL AS menuItemAndRawMaterialId, "
		+ "rmae.quantity AS finalQty, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "0 AS isGeneralFixRawMaterial "
		+ "FROM `customer_order_details` o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE :isAdjustQuantity AND rmae.quantity > 0 AND 0 IN (:functionIds) AND 0 IN (:menuItemIds) AND 1 NOT IN (:orderTypeIds) AND o.id = :orderId AND IF( 0 IN (:rawMaterialCategoryIds) , TRUE, rmc.id IN(:rawMaterialCategoryIds)) AND (ompmi.fk_menu_item_id IN (:menuItemIds) OR 0 IN (:menuItemIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY supplierId, rm.id, venue "
		+ "UNION ALL "
		+ "SELECT "
		+ "ogfrm.fk_agency_id AS supplierId, "
		+ "FALSE AS isExtra, "
		+ "NULL AS orderSequence, "
		+ "NULL AS orderType, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND od.venue_prefer_lang IS NOT NULL AND od.venue_prefer_lang != '' THEN od.venue_prefer_lang "
		+ "WHEN :langType = 2 AND od.venue_supportive_lang IS NOT NULL AND od.venue_supportive_lang != '' THEN od.venue_supportive_lang "
		+ "ELSE od.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "NULL AS contactId, "
		+ "rmc.priority AS rmcPriority, "
		+ "rmc.id AS rmcId, "
		+ "'lastRow' AS rmpriority, "
		+ "rm.id AS rmId, "
		+ "GROUP_CONCAT(CONCAT(1, '-', of2.id, '-', rm.id) ORDER BY of2.id, rm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQty, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(ogfrm.qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit, "
		+ "1 AS isGeneralFixRawMaterial "
		+ "FROM customer_order_details od "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = od.id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = of2.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement m ON m.id = ogfrm.fk_measurement_id "
		+ "WHERE 1 NOT IN (:orderTypeIds) AND od.id = :orderId AND ogfrm.qty > 0 AND (0 IN (:functionIds) OR of2.id IN(:functionIds)) AND IF(0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY supplierId, rm.id, venue) AS t "
		+ "LEFT JOIN contact c ON c.id = t.contactId "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = t.supplierId "
		+ "LEFT JOIN order_function of2 ON of2.id = t.functionId "
		+ "LEFT JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rmcId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rmId "
		+ "LEFT JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "WHERE t.finalQty > 0 "
		+ "GROUP BY t.rmId, t.venue, t.contactId, t.supplierId) AS t "
		+ "INNER JOIN measurement finalM ON finalM.id = t.fqUnit "
		+ "ORDER BY t.venue, CASE WHEN 0 IN (:orderTypeIds) AND t.orderType = 1 THEN 1 ELSE 2 END, t.contactId, CASE WHEN t.supplierId THEN 1 ELSE 2 END, t.rmcPriority, t.rmcId, t.rmPriority, t.rmId, t.isGeneralFixRawMaterial "
)

@SqlResultSetMapping(
	name = "generateChefLabourSupplierWiseRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = ChefLabourSupplierWiseRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "orderId", type = Long.class),
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "isExtra", type = Boolean.class),
			@ColumnResult(name = "contactId", type = Long.class),
			@ColumnResult(name = "contactName", type = String.class),
			@ColumnResult(name = "supplierId", type = Long.class),
			@ColumnResult(name = "supplierName", type = String.class),
			@ColumnResult(name = "isDateTime", type = Boolean.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "menuItemAndRawMaterialId", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementName", type = String.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "isAllFuntions", type = Boolean.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateMenuWithAndWithOutQuantityReport",
	resultSetMapping = "generateMenuWithQuantityOrMenuWithOutQuantityReportResult",
	query = "SELECT "
		+ "ofun.id AS functionId, "
		+ "CASE "
		+ "WHEN :langType = 1 AND ft.name_prefer_lang IS NOT NULL AND ft.name_prefer_lang != '' THEN ft.name_prefer_lang "
		+ "WHEN :langType = 2 AND ft.name_supportive_lang IS NOT NULL AND ft.name_supportive_lang != '' THEN ft.name_supportive_lang "
		+ "ELSE ft.name_default_lang "
		+ "END AS functionName, "
		+ "ofun.person AS person, "
		+ "CASE "
		+ "WHEN :langType = 1 AND ofun.function_address_prefer_lang IS NOT NULL AND ofun.function_address_prefer_lang != '' THEN ofun.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND ofun.function_address_supportive_lang IS NOT NULL AND ofun.function_address_supportive_lang != '' THEN ofun.function_address_supportive_lang "
		+ "ELSE ofun.function_address_default_lang "
		+ "END AS functionAddress, "
		+ "CASE "
		+ "WHEN :langType = 1 AND ofun.note_prefer_lang IS NOT NULL AND ofun.note_prefer_lang != '' THEN ofun.note_prefer_lang "
		+ "WHEN :langType = 2 AND ofun.note_supportive_lang IS NOT NULL AND ofun.note_supportive_lang != '' THEN ofun.note_supportive_lang "
		+ "ELSE ofun.note_default_lang "
		+ "END AS functionNote, "
		+ "ofun.date AS date, "
		+ "ofun.end_date AS endDate, "
		+ "CONCAT(DATE_FORMAT(CURDATE(), '%d/%m/%Y'), ' ', DATE_FORMAT(CURTIME(), '%I:%i %p')) AS currentDate, "
		+ "finalMt.id AS menuItemId, "
		+ "CONCAT( "
		+ "CASE "
		+ "WHEN :langType = 0 AND ompmi.menu_item_name_default_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_default_lang) != '' THEN ompmi.menu_item_name_default_lang "
		+ "WHEN :langType = 1 AND ompmi.menu_item_name_prefer_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_prefer_lang) != '' THEN ompmi.menu_item_name_prefer_lang "
		+ "WHEN :langType = 2 AND ompmi.menu_item_name_supportive_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_supportive_lang) != '' THEN ompmi.menu_item_name_supportive_lang "
		+ "WHEN :langType = 1 AND finalMt.name_prefer_lang IS NOT NULL AND finalMt.name_prefer_lang != '' THEN finalMt.name_prefer_lang "
		+ "WHEN :langType = 2 AND finalMt.name_supportive_lang IS NOT NULL AND finalMt.name_supportive_lang != '' THEN finalMt.name_supportive_lang "
		+ "ELSE finalMt.name_default_lang "
		+ "END, "
		+ "IFNULL(CASE "
		+ "WHEN :langType = 1 AND ompmi.note_prefer_lang IS NOT NULL AND ompmi.note_prefer_lang != '' THEN CONCAT(' (', ompmi.note_prefer_lang, ')') "
		+ "WHEN :langType = 2 AND ompmi.note_supportive_lang IS NOT NULL AND ompmi.note_supportive_lang != '' THEN CONCAT(' (', ompmi.note_supportive_lang, ')') "
		+ "ELSE CONCAT(' (', ompmi.note_default_lang, ')') "
		+ "END, '') "
		+ ") AS menuItem, "
		+ "CASE "
		+ "WHEN oni.id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END "
		+ "ELSE NULL "
		+ "END AS rawMaterial, "
		+ "rma.final_qty AS finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND finalM.symbol_prefer_lang IS NOT NULL AND finalM.symbol_prefer_lang != '' THEN finalM.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND finalM.symbol_supportive_lang IS NOT NULL AND finalM.symbol_supportive_lang != '' THEN finalM.symbol_supportive_lang "
		+ "ELSE finalM.symbol_default_lang "
		+ "END AS finalQuantityMeasurement, "
		+ "CASE "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (rma.final_qty % 1 = 0) AND (finalM.id = 1 OR finalM.id = 3) THEN 0 "
		+ "WHEN (finalM.decimal_limit_qty = -1) AND (finalM.id = 1 OR finalM.id = 3) THEN 3 "
		+ "ELSE finalM.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "ompmi.order_type AS orderType "
		+ "FROM order_function ofun "
		+ "INNER JOIN function_type ft ON ft.id = ofun.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = ofun.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN menu_item finalMt ON finalMt.id = ompmi.fk_menu_item_id "
		+ "LEFT JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE ofun.fk_customer_order_details_id = :orderId AND IF( 0 IN (:functionIds), TRUE, ofun.id IN(:functionIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "ORDER BY ofun.sequence, ompmi.menu_item_category_sequence, ompmi.menu_item_sequence, finalMt.priority, finalMt.id, mirm.id "
)

@SqlResultSetMapping(
	name = "generateMenuWithQuantityOrMenuWithOutQuantityReportResult",
	classes = @ConstructorResult(
		targetClass = MenuAllocationMenuWithQuantityAndWithOutQuantityReportDto.class,
		columns = {
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "functionName", type = String.class),
			@ColumnResult(name = "person", type = Long.class),
			@ColumnResult(name = "functionAddress", type = String.class),
			@ColumnResult(name = "functionNote", type = String.class),
			@ColumnResult(name = "date", type = LocalDateTime.class),
			@ColumnResult(name = "endDate", type = LocalDateTime.class),
			@ColumnResult(name = "menuItemId", type = Long.class),
			@ColumnResult(name = "menuItem", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalQuantityMeasurement", type = String.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "orderType", type = Integer.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateSupplierWiseRawMaterialReport",
	resultSetMapping = "generateSupplierWiseRawMaterialReportResult",
	query = "SELECT "
		+ "t.agencyName, "
		+ "t.mobileNumber, "
		+ "t.venue, "
		+ "t.rawMaterialCategory, "
		+ "t.rawMaterial, "
		+ "t.finalQuantity AS finalQty, "
		+ "CASE "
		+ "WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ "ELSE m.symbol_default_lang "
		+ "END AS finalQuantityMeasurement, "
		+ "CASE "
		+ "WHEN (m.decimal_limit_qty = -1) AND (t.finalQuantity % 1 = 0) AND (m.id = 1 Or m.id = 3) THEN 0 "
		+ "WHEN (m.decimal_limit_qty = -1) AND (m.id = 1 OR m.id = 3) THEN 3 "
		+ "ELSE m.decimal_limit_qty "
		+ "END AS decimalLimitQty "
		+ "FROM "
		+ "((SELECT "
		+ "t.functionId, "
		+ "t.venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS agencyName, "
		+ "contact_agency.mobile_number AS mobileNumber, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.finalQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS finalQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.finalQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit, "
		+ "t.contactAgencyId, "
		+ "t.rawMaterialCategoryId, "
		+ "t.rawMaterialId "
		+ "FROM  "
		+ "((SELECT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rmae.quantity AS finalQuantity, "
		+ "rmae.fk_measurement_id AS fqUnit,"
		+ "rmae.fk_contact_agency_id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId "
		+ "FROM customer_order_details o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE :isAdjustQuantity AND o.id = :orderId AND rmae.quantity > 0  AND (0 IN (:contactIds) OR rmae.fk_contact_agency_id IN(:contactIds)) AND IF( 0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN (:rawMaterialCategoryIds)) AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY venue, contactAgencyId, rmc.id, rm.id) "
		+ "UNION ALL "
		+ "(SELECT "
		+ "ofun.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND ofun.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND ofun.function_address_prefer_lang IS NOT NULL AND ofun.function_address_prefer_lang != '' THEN ofun.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND ofun.function_address_supportive_lang IS NOT NULL AND ofun.function_address_supportive_lang != '' THEN ofun.function_address_supportive_lang "
		+ "ELSE ofun.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS finalQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "rma.fk_contact_agency_id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId "
		+ "FROM customer_order_details o "
		+ "INNER JOIN order_function ofun ON ofun.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = ofun.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material firm ON firm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN firm.id IS NOT NULL THEN firm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE ofun.fk_customer_order_details_id = :orderId AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "AND (0 IN (:contactIds) OR rma.fk_contact_agency_id IN(:contactIds)) "
		+ "AND (0 IN (:rawMaterialCategoryIds) OR rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY venue, contactAgencyId, rmc.id, rm.id)) AS t "
		+ "LEFT JOIN measurement m ON m.id = t.fqUnit "
		+ "INNER JOIN contact contact_agency ON contact_agency.id = t.contactAgencyId "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rawMaterialCategoryId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rawMaterialId "
		+ "GROUP BY t.venue, t.contactAgencyId, t.rawMaterialCategoryId, t.rawMaterialId) "
		+ "UNION ALL "
		+ "(SELECT "
		+ "ofun.id AS functionId, "
		+ "CASE "
		+ "WHEN ogfrm.fk_godown_id IS NULL AND ofun.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "WHEN ogfrm.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND ofun.function_address_prefer_lang IS NOT NULL AND ofun.function_address_prefer_lang != '' THEN ofun.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND ofun.function_address_supportive_lang IS NOT NULL AND ofun.function_address_supportive_lang != '' THEN ofun.function_address_supportive_lang "
		+ "ELSE ofun.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS agencyName, "
		+ "contact_agency.mobile_number AS mobileNumber, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
		+ "ogfrm.qty AS finalQuantity, "
		+ "ogfrm.fk_measurement_id AS fqUnit, "
		+ "contact_agency.id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId "
		+ "FROM customer_order_details o "
		+ "INNER JOIN order_function ofun ON ofun.fk_customer_order_details_id = o.id "
		+ "INNER JOIN order_general_fix_raw_material ogfrm ON ogfrm.fk_order_function_id = ofun.id "
		+ "LEFT JOIN godown g ON g.id = ogfrm.fk_godown_id "
		+ "INNER JOIN contact contact_agency ON contact_agency.id = ogfrm.fk_agency_id "
		+ "INNER JOIN raw_material rm ON rm.id = ogfrm.fk_raw_material_id "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "WHERE ofun.fk_customer_order_details_id = :orderId AND ogfrm.qty > 0 AND "
		+ "ofun.id = (SELECT id FROM order_function WHERE fk_customer_order_details_id = :orderId GROUP BY fk_function_type_id ORDER BY MAX(person) DESC LIMIT 1) AND "
		+ "(0 IN (:contactIds) OR contact_agency.id IN(:contactIds)) AND "
		+ "(0 IN (:rawMaterialCategoryIds) OR rmc.id IN(:rawMaterialCategoryIds)) "
		+ "GROUP BY venue, contact_agency.id, rmc.id, rm.id)) AS t "
		+ "LEFT JOIN measurement m ON m.id = t.fqUnit "
		+ "ORDER BY t.venue, t.contactAgencyId, t.rawMaterialCategoryId, t.rawMaterialId"
)

@SqlResultSetMapping(
	name = "generateSupplierWiseRawMaterialReportResult",
	classes = @ConstructorResult(
		targetClass = MenuAllocationSupplierWiseRawMaterialReportDto.class,
		columns = {
			@ColumnResult(name = "agencyName", type = String.class),
			@ColumnResult(name = "mobileNumber", type = String.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalQuantityMeasurement", type = String.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateRawMaterialAllocationSupplierCategory",
	resultSetMapping = "generateRawMaterialAllocationSupplierCategoryResult",
	query = "SELECT "
		+ "DISTINCT c.id, "
		+ "c.name_default_lang AS nameDefaultLang, "
		+ "c.name_prefer_lang AS namePreferLang, "
		+ "c.name_supportive_lang AS nameSupportiveLang "
		+ "FROM raw_material_allocation rma "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.id = rma.fk_menu_preparation_menu_item_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.id = ompmi.fk_menu_preparation_id "
		+ "INNER JOIN order_function of2 ON of2.id = omp.fk_order_function_id "
		+ "INNER JOIN contact c ON c.id = rma.fk_contact_agency_id "
		+ "WHERE of2.fk_customer_order_details_id = :orderId"
)

	@SqlResultSetMapping(
	name = "generateRawMaterialAllocationSupplierCategoryResult",
	classes = @ConstructorResult(
		targetClass = CommonDataForDropDownDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateOrderFileReport",
	resultSetMapping = "generateOrderFileReportResult",
	query = "SELECT * from ((SELECT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN old.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ "WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ "ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN old.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND cct.name_prefer_lang IS NOT NULL AND cct.name_prefer_lang != '' THEN cct.name_prefer_lang "
		+ "WHEN :langType = 2 AND cct.name_supportive_lang IS NOT NULL AND cct.name_supportive_lang != '' THEN cct.name_supportive_lang "
		+ "ELSE cct.name_default_lang "
		+ "END AS agencyType, "
		+ "CASE "
		+ "WHEN :langType = 1 AND con_category.name_prefer_lang IS NOT NULL AND con_category.name_prefer_lang != '' THEN con_category.name_prefer_lang "
		+ "WHEN :langType = 2 AND con_category.name_supportive_lang IS NOT NULL AND con_category.name_supportive_lang != '' THEN con_category.name_supportive_lang "
		+ "ELSE con_category.name_default_lang "
		+ "END AS agency, "
		+ "CASE "
		+ "WHEN :langType = 1 AND c.name_prefer_lang IS NOT NULL AND c.name_prefer_lang != '' THEN c.name_prefer_lang "
		+ "WHEN :langType = 2 AND c.name_supportive_lang IS NOT NULL AND c.name_supportive_lang != '' THEN c.name_supportive_lang "
		+ "ELSE c.name_default_lang "
		+ "END AS particulars, "
		+ "c.mobile_number AS mobileNumber, "
		+ "SUM(old.quantity) AS orderQuantity, "
		+ "'' AS unit, "
		+ "old.date AS orderDate, "
		+ "3 AS orderField, "
		+ "c.id AS contactAgencyId, "
		+ "cct.id AS rawMaterialCategoryId, "
		+ "NULL AS rawMaterialId, "
		+ "0 as priority,"
		+ "0 AS decimalLimitQty, "
		+ "null AS isPlate, "
		+ "null AS orderType "
		+ "FROM order_labour_distribution old "
		+ "LEFT JOIN godown g ON g.id = old.fk_godown_id "
		+ "LEFT JOIN contact_category con_category ON con_category.id = old.fk_contact_category_id "
		+ "LEFT JOIN contact_category_type cct ON cct.id = con_category.fk_contact_category_type_id "
		+ "LEFT JOIN contact c ON c.id = old.fk_contact_id "
		+ "LEFT JOIN order_function of2 ON of2.id = old.fk_order_function_id "
		+ "LEFT JOIN customer_order_details cod ON cod.id = of2.fk_customer_order_details_id "
		+ "WHERE cod.id = :orderId AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND :dataTypeIds != 1 "
		+ "GROUP BY venue, orderDate, con_category.id, c.id) "
		+ "UNION ALL "
		+ "(SELECT DISTINCT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ompmi.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ "WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ "ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN ompmi.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND cct.name_prefer_lang IS NOT NULL AND cct.name_prefer_lang != '' THEN cct.name_prefer_lang "
		+ "WHEN :langType = 2 AND cct.name_supportive_lang IS NOT NULL AND cct.name_supportive_lang != '' THEN cct.name_supportive_lang "
		+ "ELSE cct.name_default_lang "
		+ "END AS agencyType, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS agency, "
		+ "CASE "
		+ "WHEN :langType = 0 AND ompmi.menu_item_name_default_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_default_lang) != '' THEN ompmi.menu_item_name_default_lang "
		+ "WHEN :langType = 1 AND ompmi.menu_item_name_prefer_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_prefer_lang) != '' THEN ompmi.menu_item_name_prefer_lang "
		+ "WHEN :langType = 2 AND ompmi.menu_item_name_supportive_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_supportive_lang) != '' THEN ompmi.menu_item_name_supportive_lang "
		+ "WHEN :langType = 1 AND mi.name_prefer_lang IS NOT NULL AND mi.name_prefer_lang != '' THEN mi.name_prefer_lang "
		+ "WHEN :langType = 2 AND mi.name_supportive_lang IS NOT NULL AND mi.name_supportive_lang != '' THEN mi.name_supportive_lang "
		+ "ELSE mi.name_default_lang "
		+ "END AS partirmclars, "
		+ "contact_agency.mobile_number AS mobileNumber, "
		+ "IF(omat.is_plate, omat.counter_no, CONCAT_WS(', ', omat.counter_no, omat.helper_no)) AS orderQuantity, "
		+ "IF(omat.is_plate, CASE "
		+ "WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ "ELSE m.symbol_default_lang "
		+ "END, "
		+ "CONCAT_WS('', IF(omat.counter_no IS NOT NULL, '$labour', NULL), IF(omat.helper_no IS NOT NULL, '$helper', NULL))) AS unit, "
		+ "ompmi.order_date AS orderDate, "
		+ "2 AS orderField, "
		+ "contact_agency.id AS contactAgencyId, "
		+ "cct.id AS rawMaterialCategoryId, "
		+ "NULL AS rawMaterialId, "
		+ "0 as priority, "
		+ "CASE "
		+ "WHEN (omat.is_plate = 1 AND omat.counter_no IS NOT NULL AND omat.fk_unit_id IS NOT NULL) "
		+ "THEN "
		+ " CASE "
		+ " WHEN (m.decimal_limit_qty = -1) AND (omat.counter_no % 1 = 0) AND (m.id = 1 OR m.id = 3) THEN 0 "
		+ " WHEN (m.decimal_limit_qty = -1) AND (m.id = 1 OR m.id = 3) THEN 3 "
		+ " ELSE m.decimal_limit_qty "
		+ "END "
		+ "ELSE NULL "
		+ "END AS decimalLimitQty, "
		+ "omat.is_plate AS isPlate, "
		+ "null AS orderType "
		+ "FROM customer_order_details cod "
		+ "LEFT JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "LEFT JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "LEFT JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "LEFT JOIN order_menu_allocation_type omat ON omat.fk_order_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN measurement m on m.id = omat.fk_unit_id "
		+ "LEFT JOIN godown g ON g.id = ompmi.fk_godown_id "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = omat.fk_contact_id "
		+ "LEFT JOIN contact_categories contactCategories ON contactCategories.fk_contact_id = contact_agency.id "
		+ "LEFT JOIN contact_category cc ON cc.id = contactCategories.fk_contact_category_id "
		+ "LEFT JOIN contact_category_type cct ON cct.id = cc.fk_contact_category_type_id "
		+ "LEFT JOIN menu_item mi ON mi.id = ompmi.fk_menu_item_id "
		+ "WHERE cod.id = :orderId AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND ompmi.order_type = 1 AND :dataTypeIds != 1 AND cc.fk_contact_category_type_id = 5) "
		+ "UNION ALL "
		+ "(SELECT DISTINCT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN ompmi.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ "WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ "ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN ompmi.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND cct.name_prefer_lang IS NOT NULL AND cct.name_prefer_lang != '' THEN cct.name_prefer_lang "
		+ "WHEN :langType = 2 AND cct.name_supportive_lang IS NOT NULL AND cct.name_supportive_lang != '' THEN cct.name_supportive_lang "
		+ "ELSE cct.name_default_lang "
		+ "END AS agencyType, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS agency, "
		+ "CASE "
		+ "WHEN :langType = 0 AND ompmi.menu_item_name_default_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_default_lang) != '' THEN ompmi.menu_item_name_default_lang "
		+ "WHEN :langType = 1 AND ompmi.menu_item_name_prefer_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_prefer_lang) != '' THEN ompmi.menu_item_name_prefer_lang "
		+ "WHEN :langType = 2 AND ompmi.menu_item_name_supportive_lang IS NOT NULL AND TRIM(ompmi.menu_item_name_supportive_lang) != '' THEN ompmi.menu_item_name_supportive_lang "
		+ "WHEN :langType = 1 AND mi.name_prefer_lang IS NOT NULL AND mi.name_prefer_lang != '' THEN mi.name_prefer_lang "
		+ "WHEN :langType = 2 AND mi.name_supportive_lang IS NOT NULL AND mi.name_supportive_lang != '' THEN mi.name_supportive_lang "
		+ "ELSE mi.name_default_lang "
		+ "END AS particulars, "
		+ "contact_agency.mobile_number AS mobileNumber, "
		+ "omat.quantity AS orderQuantity, "
		+ "CASE "
		+ "WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ "ELSE m.symbol_default_lang "
		+ "END AS unit, "
		+ "ompmi.order_date AS orderDate, "
		+ "1 AS orderField, "
		+ "contact_agency.id AS contactAgencyId, "
		+ "cct.id AS rawMaterialCategoryId, "
		+ "NULL AS rawMaterialId,"
		+ "0 as priority,"
		+ "CASE "
		+ "WHEN ompmi.order_type = 2 AND omat.fk_unit_id IS NULL THEN 0 "
		+ "WHEN (m.decimal_limit_qty = -1) AND (omat.quantity % 1 = 0) AND (m.id = 1 OR m.id = 3) THEN 0 "
		+ "WHEN (m.decimal_limit_qty = -1) AND (m.id = 1 OR m.id = 3) THEN 3 "
		+ "ELSE m.decimal_limit_qty "
		+ "END AS decimalLimitQty, "
		+ "null AS isPlate, "
		+ "ompmi.order_type AS orderType "
		+ "FROM customer_order_details cod "
		+ "LEFT JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "LEFT JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "LEFT JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "LEFT JOIN order_menu_allocation_type omat ON omat.fk_order_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = ompmi.fk_godown_id "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = omat.fk_contact_id "
		+ "LEFT JOIN contact_categories contactCategories ON contactCategories.fk_contact_id = contact_agency.id "
		+ "LEFT JOIN contact_category cc ON cc.id = contactCategories.fk_contact_category_id "
		+ "LEFT JOIN contact_category_type cct ON cct.id = cc.fk_contact_category_type_id "
		+ "LEFT JOIN menu_item mi ON mi.id = ompmi.fk_menu_item_id "
		+ "LEFT JOIN measurement m ON m.id = omat.fk_unit_id "
		+ "WHERE cod.id = :orderId AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND ompmi.order_type = 2 AND :dataTypeIds != 1 AND cc.fk_contact_category_type_id = 4) "
		+ "UNION ALL "
		+ "(SELECT "
		+ "t.functionId, "
		+ "t.venue, "
		+ "t.agencyType, "
		+ "t.agency, "
		+ "t.particulars, "
		+ "t.mobileNumber, "
		+ "t.orderQuantity, "
		+ "CASE "
		+ "WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ "WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ "ELSE m.symbol_default_lang "
		+ "END AS unit, "
		+ "t.orderDate, "
		+ "4 AS orderField, "
		+ "t.contactAgencyId, "
		+ "t.rawMaterialCategoryId, "
		+ "t.rawMaterialId,"
		+ "t.priority,"
		+ "CASE "
		+ "WHEN (m.decimal_limit_qty = -1) AND (t.orderQuantity % 1 = 0) AND (m.id = 1 OR m.id = 3) THEN 0 "
		+ "WHEN (m.decimal_limit_qty = -1) AND (m.id = 1 OR m.id = 3) THEN 3 "
		+ "ELSE m.decimal_limit_qty "
		+ "END AS decimalLimitQty,"
		+ "t.isPlate, "
		+ "t.orderType "
		+ "FROM "
		+ "(SELECT "
		+ "t.functionId,"
		+ "t.venue, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS agencyType, "
		+ "CASE "
		+ "WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ "WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ "ELSE contact_agency.name_default_lang "
		+ "END AS agency, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ "WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ "ELSE rm.name_default_lang "
		+ "END AS particulars, "
		+ "t.mobileNumber, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.orderQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS orderQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.orderQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit,"
		+ "t.orderDate, "
		+ "t.contactAgencyId, "
		+ "t.rawMaterialCategoryId, "
		+ "t.rawMaterialId, "
		+ "t.priority, "
		+ "t.isPlate, "
		+ "t.orderType "
		+ "FROM ("
		+ "SELECT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,"
		+ "c.mobile_number AS mobileNumber,"
		+ "rmae.quantity AS orderQuantity, "
		+ "rmae.fk_measurement_id AS fqUnit, "
		+ "rmae.order_time AS orderDate, "
		+ "contact_agency.id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId, "
		+ "rmc.priority as priority, "
		+ "null AS isPlate, "
		+ "null AS orderType "
		+ "FROM customer_order_details o "
		+ "LEFT JOIN contact c ON o.fk_contact_customer_id = c.id "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = rmae.fk_contact_agency_id "
		+ "WHERE :isAdjustQuantity AND o.id = :orderId AND rmae.quantity > 0 AND 0 IN (:functionIds) AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN (:rawMaterialCategoryIds)) AND rmc.is_direct_order AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1)"
		+ "GROUP BY venue, contactAgencyId, rm.id, rmae.order_time "
		+ "UNION ALL "
		+ "SELECT "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ "WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ "ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ "WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ "ELSE of2.function_address_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "c.mobile_number AS mobileNumber, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS orderQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, finalM.id)), getSmallestMeasurementId(finalM.id), 0) AS fqUnit, "
		+ "rma.order_time AS orderDate, "
		+ "contact_agency.id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId, "
		+ "rmc.priority as priority, "
		+ "null AS isPlate, "
		+ "null AS orderType "
		+ "FROM customer_order_details cod "
		+ "LEFT JOIN contact c ON cod.fk_contact_customer_id = c.id "
		+ "LEFT JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "LEFT JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "LEFT JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "LEFT JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN measurement finalM ON finalM.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = rma.fk_contact_agency_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE cod.id = :orderId AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND (rmc.id IN (:rawMaterialCategoryIds) OR 0 IN (:rawMaterialCategoryIds)) AND rmc.is_direct_order AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) AND :dataTypeIds != 2 "
		+ "GROUP BY venue, contact_agency.id, rm.id, rma.order_time) AS t "
		+ "LEFT JOIN measurement m ON m.id = t.fqUnit "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = t.contactAgencyId "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rawMaterialCategoryId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rawMaterialId "
		+ "GROUP BY venue, contact_agency.id, rm.id, t.orderDate ) AS t "
		+ "LEFT JOIN measurement m ON m.id = t.fqUnit)) as t "
		+ "WHERE t.agencyType IS NOT NULL AND (t.orderQuantity IS NOT NULL AND t.orderQuantity != '' AND t.orderQuantity != 0) "
		+ "ORDER BY t.venue, t.orderField, t.priority, t.agencyType, t.contactAgencyId, t.orderDate, t.rawMaterialCategoryId, t.rawMaterialId"
)

@SqlResultSetMapping(
	name = "generateOrderFileReportResult",
	classes = @ConstructorResult(
		targetClass = RawMaterialOrderFileReportDto.class,
		columns = {
			@ColumnResult(name = "functionId", type = Integer.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "agencyType", type = String.class),
			@ColumnResult(name = "agency", type = String.class),
			@ColumnResult(name = "particulars", type = String.class),
			@ColumnResult(name = "mobileNumber", type = String.class),
			@ColumnResult(name = "orderQuantity", type = String.class),
			@ColumnResult(name = "unit", type = String.class),
			@ColumnResult(name = "orderDate", type = LocalDateTime.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "isPlate", type = Integer.class),
			@ColumnResult(name = "orderType", type = Integer.class)
		}
	)
)

@NamedNativeQuery(
	name = "generateChithhiReport",
	resultSetMapping = "generateChithhiReportResult",
	query = "SELECT "
		+ ":orderId AS orderId, "
		+ "t.venue, "
		+ "t.isExtra, "
		+ "t.rawMaterialCategory, "
		+ "t.contactAgencyId, "
		+ "t.agency, "
		+ "t.orderDate, "
		+ "t.orderDateRef, "
		+ "t.orderTimeRef,  "
		+ "t.rawMaterial, "
		+ "t.menuItemAndRawMaterialId, "
		+ "t.orderQuantity AS finalQty, "
		+ "m.id AS finalMeasurementId, "
		+ "CONCAT( "
		+ "CASE "
		+ " WHEN m.decimal_limit_qty = -1 THEN "
		+ " CASE "
		+ "  WHEN (t.orderQuantity % 1 = 0) THEN FLOOR(t.orderQuantity) "
		+ "  ELSE FORMAT(t.orderQuantity, 3) "
		+ " END "
		+ " WHEN m.decimal_limit_qty = 0 THEN FLOOR(t.orderQuantity) "
		+ " WHEN m.decimal_limit_qty = 1 THEN FORMAT(FLOOR((t.orderQuantity + 1e-10) * 10) / 10, 1) "
		+ " WHEN m.decimal_limit_qty = 2 THEN FORMAT(FLOOR((t.orderQuantity + 1e-10) * 100) / 100, 2) "
		+ " WHEN m.decimal_limit_qty = 3 THEN FORMAT(FLOOR((t.orderQuantity + 1e-10) * 1000) / 1000, 3) "
		+ " WHEN m.decimal_limit_qty = 4 THEN FORMAT(FLOOR((t.orderQuantity + 1e-10) * 10000) / 10000, 4) "
		+ " ELSE FLOOR(t.orderQuantity) "
		+ " END, "
		+ " ' ', "
		+ " CASE "
		+ " WHEN :langType = 1 AND m.symbol_prefer_lang IS NOT NULL AND m.symbol_prefer_lang != '' THEN m.symbol_prefer_lang "
		+ " WHEN :langType = 2 AND m.symbol_supportive_lang IS NOT NULL AND m.symbol_supportive_lang != '' THEN m.symbol_supportive_lang "
		+ " ELSE m.symbol_default_lang "
		+ "END "
		+ ") AS orderQuantity, "
		+ "CASE "
		+ " WHEN TIME(CONVERT_TZ(t.orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '04:00:00' AND '10:45:59' THEN :morning "
		+ " WHEN TIME(CONVERT_TZ(t.orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '10:46:00' AND '16:00:00' THEN :noon "
		+ " WHEN TIME(CONVERT_TZ(t.orderDate, :timeZone, (SELECT time_zone FROM company_setting))) BETWEEN '16:01:00' AND '20:00:00' THEN :evening "
		+ " WHEN TIME(CONVERT_TZ(t.orderDate, :timeZone, (SELECT time_zone FROM company_setting))) >= '20:01:00' OR TIME(CONVERT_TZ(t.orderDate, :timeZone, (SELECT time_zone FROM company_setting))) <= '03:59:59' THEN :night "
		+ "ELSE '' "
		+ "END AS timePeriod, "
		+ " m.decimal_limit_qty as decimalLimitQty, "
		+ "IF(0 IN (:functionIds), TRUE, FALSE) AS isAllFuntions "
		+ "FROM "
		+ "(SELECT "
		+ "t.functionId, "
		+ "t.venue,"
		+ "IF(COUNT(t.isExtra) = 1 AND t.isExtra = TRUE, 1, 0) AS isExtra, "
		+ "CASE "
		+ "WHEN :langType = 1 AND rmc.name_prefer_lang IS NOT NULL AND rmc.name_prefer_lang != '' THEN rmc.name_prefer_lang "
		+ "WHEN :langType = 2 AND rmc.name_supportive_lang IS NOT NULL AND rmc.name_supportive_lang != '' THEN rmc.name_supportive_lang "
		+ "ELSE rmc.name_default_lang "
		+ "END AS rawMaterialCategory, "
		+ "t.contactAgencyId, "
		+ "CASE "
		+ " WHEN :langType = 1 AND contact_agency.name_prefer_lang IS NOT NULL AND contact_agency.name_prefer_lang != '' THEN contact_agency.name_prefer_lang "
		+ " WHEN :langType = 2 AND contact_agency.name_supportive_lang IS NOT NULL AND contact_agency.name_supportive_lang != '' THEN contact_agency.name_supportive_lang "
		+ " ELSE contact_agency.name_default_lang "
		+ "END AS agency, "
		+ "t.orderDate, "
		+ "t.orderDateRef, "
		+ "t.orderTimeRef, "
		+ "CASE "
		+ " WHEN :langType = 1 AND rm.name_prefer_lang IS NOT NULL AND rm.name_prefer_lang != '' THEN rm.name_prefer_lang "
		+ " WHEN :langType = 2 AND rm.name_supportive_lang IS NOT NULL AND rm.name_supportive_lang != '' THEN rm.name_supportive_lang "
		+ " ELSE rm.name_default_lang "
		+ "END AS rawMaterial, "
 		+ "GROUP_CONCAT(t.menuItemAndRawMaterialId ORDER BY t.menuItemAndRawMaterialId SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(t.orderQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS orderQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(t.orderQuantity, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit, "
		+ "t.rawMaterialCategoryId, "
		+ "t.rawMaterialId "
		+ "FROM "
		+ "((SELECT "
		+ "FALSE As isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rma.fk_godown_id IS NULL AND of2.function_address_default_lang IS NULL THEN "
		+ "CASE "
		+ " WHEN :langType = 1 AND cod.venue_prefer_lang IS NOT NULL AND cod.venue_prefer_lang != '' THEN cod.venue_prefer_lang "
		+ " WHEN :langType = 2 AND cod.venue_supportive_lang IS NOT NULL AND cod.venue_supportive_lang != '' THEN cod.venue_supportive_lang "
		+ " ELSE cod.venue_default_lang "
		+ "END "
		+ "WHEN rma.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ " WHEN :langType = 1 AND of2.function_address_prefer_lang IS NOT NULL AND of2.function_address_prefer_lang != '' THEN of2.function_address_prefer_lang "
		+ " WHEN :langType = 2 AND of2.function_address_supportive_lang IS NOT NULL AND of2.function_address_supportive_lang != '' THEN of2.function_address_supportive_lang "
		+ " ELSE of2.function_address_default_lang "
		+ "END "
		+ " ELSE "
		+ "CASE "
		+ " WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ " WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ " ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue, "
		+ "rma.order_time AS orderDate, "
		+ "DATE_FORMAT(rma.order_time, '%d/%m/%Y') AS orderDateRef, "
		+ "DATE_FORMAT(rma.order_time, '%H:%i') AS orderTimeRef, "
		+ "GROUP_CONCAT(CONCAT(0, '-', ompmi.id, '-', mirm.id) ORDER BY ompmi.id, mirm.id SEPARATOR ', ') AS menuItemAndRawMaterialId, "
		+ "adjustQuantity(SUM(getSmallestMeasurementValue(rma.final_qty, m.id)), getSmallestMeasurementId(m.id), 0) AS orderQuantity, "
		+ "adjustQuantityUnit(SUM(getSmallestMeasurementValue(rma.final_qty, m.id)), getSmallestMeasurementId(m.id), 0) AS fqUnit , "
		+ "rma.fk_contact_agency_id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId "
		+ "FROM customer_order_details cod "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = cod.id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN godown g ON g.id = rma.fk_godown_id "
		+ "LEFT JOIN measurement m ON m.id = rma.fk_final_measurement_id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "INNER JOIN contact contact_agency ON contact_agency.id = rma.fk_contact_agency_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = cod.id "
		+ "LEFT JOIN measurement rmaem ON rmaem.id = rmae.fk_measurement_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE cod.id = :orderId AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN (:rawMaterialCategoryIds)) AND rmc.is_direct_order AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY venue, contactAgencyId, rm.id, rma.order_time "
		+ "HAVING orderQuantity > 0) "
		+ "UNION ALL "
		+ "(SELECT "
		+ "TRUE AS isExtra, "
		+ "of2.id AS functionId, "
		+ "CASE "
		+ "WHEN rmae.fk_godown_id IS NULL THEN "
		+ "CASE "
		+ "WHEN :langType = 1 AND o.venue_prefer_lang IS NOT NULL AND o.venue_prefer_lang != '' THEN o.venue_prefer_lang "
		+ "WHEN :langType = 2 AND o.venue_supportive_lang IS NOT NULL AND o.venue_supportive_lang != '' THEN o.venue_supportive_lang "
		+ "ELSE o.venue_default_lang "
		+ "END "
		+ "ELSE "
		+ "CASE "
		+ "WHEN :langType = 1 AND g.address_prefer_lang IS NOT NULL AND g.address_prefer_lang != '' THEN g.address_prefer_lang "
		+ "WHEN :langType = 2 AND g.address_supportive_lang IS NOT NULL AND g.address_supportive_lang != '' THEN g.address_supportive_lang "
		+ "ELSE g.address_default_lang "
		+ "END "
		+ "END AS venue,"
		+ "rmae.order_time AS orderDate, "
		+ "DATE_FORMAT(rmae.order_time, '%d/%m/%Y') AS orderDateRef, "
		+ "DATE_FORMAT(rmae.order_time, '%H:%i') AS orderTimeRef, "
		+ "NULL AS menuItemAndRawMaterialId, "
		+ "rmae.quantity AS orderQuantity, "
		+ "rmae.fk_measurement_id AS fqUnit,"
		+ "rmae.fk_contact_agency_id AS contactAgencyId, "
		+ "rmc.id AS rawMaterialCategoryId, "
		+ "rm.id AS rawMaterialId "
		+ "FROM customer_order_details o "
		+ "INNER JOIN order_function of2 ON of2.fk_customer_order_details_id = o.id "
		+ "INNER JOIN function_type ft ON ft.id = of2.fk_function_type_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.fk_order_function_id = of2.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.fk_menu_preparation_id = omp.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_preparation_menu_item_id = ompmi.id "
		+ "LEFT JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id "
		+ "LEFT JOIN raw_material rm ON rm.id = CASE "
		+ "WHEN mirm.id IS NOT NULL THEN mirm.fk_raw_material_id "
		+ "ELSE rma.fk_raw_material_id "
		+ "END "
		+ "INNER JOIN raw_material_category rmc ON rmc.id = rm.fk_raw_material_category_id "
		+ "INNER JOIN contact contact_agency ON contact_agency.id = rma.fk_contact_agency_id "
		+ "LEFT JOIN raw_material_allocation_extra rmae ON rmae.fk_raw_material_id = rm.id AND rmae.fk_customer_order_details_id = o.id "
		+ "LEFT JOIN godown g ON g.id = rmae.fk_godown_id "
		+ "LEFT JOIN order_no_items oni ON oni.fk_order_menu_preparation_id = omp.id AND oni.fk_raw_material_id = rm.id "
		+ "WHERE :isAdjustQuantity AND o.id = :orderId AND rmae.quantity > 0 AND IF(0 IN (:functionIds), TRUE, of2.id IN (:functionIds)) AND IF( 0 IN (:rawMaterialCategoryIds), TRUE, rmc.id IN (:rawMaterialCategoryIds)) AND rmc.is_direct_order AND oni.id IS NULL AND NOT (ompmi.order_type = 2 AND rmc.fk_raw_material_category_type_id = 1) "
		+ "GROUP BY venue, contactAgencyId, rm.id, rmae.order_time)) AS t "
		+ "LEFT JOIN raw_material_category rmc ON rmc.id = t.rawMaterialCategoryId "
		+ "LEFT JOIN raw_material rm ON rm.id = t.rawMaterialId "
		+ "INNER JOIN measurement m ON m.id = t.fqUnit "
		+ "LEFT JOIN contact contact_agency ON contact_agency.id = t.contactAgencyId "
		+ "GROUP BY t.venue, t.rawMaterialCategoryId, t.contactAgencyId, t.orderDate, t.rawMaterialId) AS t "
		+ "LEFT JOIN company_preferences cp ON cp.id = 1 "
		+ "INNER JOIN measurement m ON m.id = t.fqUnit "
		+ "ORDER BY t.venue, t.rawMaterialCategoryId, t.contactAgencyId, t.orderDate, t.rawMaterialId"
)

@SqlResultSetMapping(
	name = "generateChithhiReportResult",
	classes = @ConstructorResult(
		targetClass = RawMaterialChithhiReportDto.class,
		columns = {
			@ColumnResult(name = "orderId", type = Long.class),
			@ColumnResult(name = "venue", type = String.class),
			@ColumnResult(name = "isExtra", type = Boolean.class),
			@ColumnResult(name = "rawMaterialCategory", type = String.class),
			@ColumnResult(name = "contactAgencyId", type = Long.class),
			@ColumnResult(name = "agency", type = String.class),
			@ColumnResult(name = "orderDate", type = LocalDateTime.class),
			@ColumnResult(name = "orderDateRef", type = String.class),
			@ColumnResult(name = "orderTimeRef", type = String.class),
			@ColumnResult(name = "rawMaterial", type = String.class),
			@ColumnResult(name = "menuItemAndRawMaterialId", type = String.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "orderQuantity", type = String.class),
			@ColumnResult(name = "timePeriod", type = String.class),
			@ColumnResult(name = "decimalLimitQty", type = Integer.class),
			@ColumnResult(name = "isAllFuntions", type = Boolean.class),
		}
	)
)

@NamedNativeQuery(
	name = "findRawMaterialCategoriesByDirectOrderAndOrderId",
	resultSetMapping = "findRawMaterialCategoriesByDirectOrderAndOrderIdResult",
	query ="SELECT "
		+ "rmc.id, "
		+ "rmc.name_default_lang AS nameDefaultLang, "
		+ "rmc.name_prefer_lang AS namePreferLang, "
		+ "rmc.name_supportive_lang AS nameSupportiveLang "
		+ "FROM raw_material_category rmc "
		+ "INNER JOIN raw_material rm ON rm.fk_raw_material_category_id = rmc.id "
		+ "INNER JOIN menu_item_raw_material mirm ON mirm.fk_raw_material_id = rm.id "
		+ "INNER JOIN raw_material_allocation rma ON rma.fk_menu_item_raw_material_id = mirm.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.id = rma.fk_menu_preparation_menu_item_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.id = ompmi.fk_menu_preparation_id "
		+ "INNER JOIN order_function ofu ON ofu.id = omp.fk_order_function_id "
		+ "WHERE ofu.fk_customer_order_details_id = :orderId AND rmc.is_direct_order = true "
		+ "GROUP BY rmc.id "
		+ "ORDER BY "
		+ "CASE "
		+ "WHEN rmc.priority IS NULL THEN rmc.id "
		+ "ELSE rmc.priority "
		+ "END;"
)

@SqlResultSetMapping(
	name = "findRawMaterialCategoriesByDirectOrderAndOrderIdResult",
	classes = @ConstructorResult(
		targetClass = RawMaterialCategoryDirectOrderDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class)
		}
	)
)

@NamedNativeQuery(
	name = "findAllMenuItemsByOrderId",
	resultSetMapping = "findAllMenuItemsByOrderIdResult",
	query = "SELECT "
		+ "DISTINCT mi.id, "
		+ "mi.name_default_lang AS nameDefaultLang, "
		+ "mi.name_prefer_lang AS namePreferLang, "
		+ "mi.name_supportive_lang AS nameSupportiveLang "
		+ "FROM order_menu_preparation_menu_item ompmi "
		+ "INNER JOIN order_menu_preparation omp ON omp.id = ompmi.fk_menu_preparation_id "
		+ "INNER JOIN order_function of2 ON of2.id = omp.fk_order_function_id "
		+ "INNER JOIN menu_item mi ON mi.id = ompmi.fk_menu_item_id "
		+ "WHERE of2.fk_customer_order_details_id = :orderId "
		+ "ORDER BY mi.priority"
)

@SqlResultSetMapping(
	name = "findAllMenuItemsByOrderIdResult",
	classes = @ConstructorResult(
		targetClass = CommonDataForDropDownDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class)
		}
	)
)

@NamedNativeQuery(
	name = "findSelectedChefLabourAgency",
	resultSetMapping = "findSelectedChefLabourAgencyResult",
	query = "SELECT DISTINCT c.id, "
		+ "c.name_default_lang AS nameDefaultLang, "
		+ "c.name_prefer_lang AS namePreferLang, "
		+ "c.name_supportive_lang AS nameSupportiveLang "
		+ "FROM contact c "
		+ "INNER JOIN order_menu_allocation_type omat ON omat.fk_contact_id = c.id "
		+ "INNER JOIN order_menu_preparation_menu_item ompmi ON ompmi.id = omat.fk_order_menu_preparation_menu_item_id "
		+ "INNER JOIN order_menu_preparation omp ON omp.id = ompmi.fk_menu_preparation_id "
		+ "INNER JOIN order_function of2 ON of2.id = omp.fk_order_function_id "
		+ "INNER JOIN customer_order_details cod ON cod.id = of2.fk_customer_order_details_id "
		+ "WHERE ompmi.order_type = 1 AND cod.id = :orderId GROUP BY omat.fk_order_menu_preparation_menu_item_id "
)

@SqlResultSetMapping(
	name = "findSelectedChefLabourAgencyResult",
	classes = @ConstructorResult(
		targetClass = CommonDataForDropDownDto.class,
		columns = {
			@ColumnResult(name = "id", type = Long.class),
			@ColumnResult(name = "nameDefaultLang", type = String.class),
			@ColumnResult(name = "namePreferLang", type = String.class),
			@ColumnResult(name = "nameSupportiveLang", type = String.class)
		}
	)
)

@NamedNativeQuery (
	name = "findRawMaterialByMenuItemAndRawMaterialId",
	resultSetMapping = "findRawMaterialByMenuItemAndRawMaterialIdResult",
	query =  "SELECT "
			+ "FALSE AS isGeneralFixRawMaterial, "
			+ "rma.fk_menu_preparation_menu_item_id AS menuPreparationMenuItemId, "
			+ "rma.fk_menu_item_raw_material_id AS menuItemRawMaterialId, "
			+ "rma.final_qty AS finalQty, "
			+ "rma.fk_final_measurement_id AS finalMeasurementId, "
			+ "NULL AS functionId, "
			+ "mirm.fk_raw_material_id AS rawMaterialId "
			+ "FROM raw_material_allocation rma "
			+ "INNER JOIN menu_item_raw_material mirm ON mirm.id = rma.fk_menu_item_raw_material_id  "
			+ "WHERE rma.fk_menu_preparation_menu_item_id = :menuPreparationMenuItemId AND rma.fk_menu_item_raw_material_id = :rawMaterialId"
)

@NamedNativeQuery (
		name = "findRawMaterialByFunctionAndRawMaterialId",
		resultSetMapping = "findRawMaterialByMenuItemAndRawMaterialIdResult",
		query =  "SELECT "
				+ "TRUE AS isGeneralFixRawMaterial, "
				+ "NULL AS menuPreparationMenuItemId, "
				+ "NULL AS menuItemRawMaterialId, "
				+ "ogfrm.fk_order_function_id AS functionId, "
				+ "ogfrm.fk_raw_material_id AS rawMaterialId, "
				+ "ogfrm.qty AS finalQty, "
				+ "ogfrm.fk_measurement_id AS finalMeasurementId "
				+ "FROM order_general_fix_raw_material ogfrm "
				+ "WHERE ogfrm.fk_order_function_id = :orderFunctionId AND ogfrm.fk_raw_material_id = :rawMaterialId"
	)
@SqlResultSetMapping(
	name = "findRawMaterialByMenuItemAndRawMaterialIdResult",
	classes = @ConstructorResult(
	targetClass = RawMaterialDetailsDto.class,
	columns = {
			@ColumnResult(name = "isGeneralFixRawMaterial", type = Boolean.class),
			@ColumnResult(name = "menuPreparationMenuItemId", type = Long.class),
			@ColumnResult(name = "menuItemRawMaterialId", type = Long.class),
			@ColumnResult(name = "finalQty", type = Double.class),
			@ColumnResult(name = "finalMeasurementId", type = Long.class),
			@ColumnResult(name = "functionId", type = Long.class),
			@ColumnResult(name = "rawMaterialId", type = Long.class)
		}
	)
)

@Entity
public class MenuAllocationReportQuery extends AuditIdModelOnly {
}